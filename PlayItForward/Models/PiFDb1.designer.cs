#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PiF.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
	public partial class PiFDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertUserWarned(UserWarned instance);
    partial void UpdateUserWarned(UserWarned instance);
    partial void DeleteUserWarned(UserWarned instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertModAlert(ModAlert instance);
    partial void UpdateModAlert(ModAlert instance);
    partial void DeleteModAlert(ModAlert instance);
    partial void InsertThread(Thread instance);
    partial void UpdateThread(Thread instance);
    partial void DeleteThread(Thread instance);
    partial void InsertThreadGame(ThreadGame instance);
    partial void UpdateThreadGame(ThreadGame instance);
    partial void DeleteThreadGame(ThreadGame instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserIP(UserIP instance);
    partial void UpdateUserIP(UserIP instance);
    partial void DeleteUserIP(UserIP instance);
    partial void InsertUserScoreModifier(UserScoreModifier instance);
    partial void UpdateUserScoreModifier(UserScoreModifier instance);
    partial void DeleteUserScoreModifier(UserScoreModifier instance);
    partial void InsertUserSteamID(UserSteamID instance);
    partial void UpdateUserSteamID(UserSteamID instance);
    partial void DeleteUserSteamID(UserSteamID instance);
    #endregion
		
		public PiFDbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PiFDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PiFDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PiFDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PiFDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<UserWarned> UserWarneds
		{
			get
			{
				return this.GetTable<UserWarned>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<ModAlert> ModAlerts
		{
			get
			{
				return this.GetTable<ModAlert>();
			}
		}
		
		public System.Data.Linq.Table<Thread> Threads
		{
			get
			{
				return this.GetTable<Thread>();
			}
		}
		
		public System.Data.Linq.Table<ThreadGame> ThreadGames
		{
			get
			{
				return this.GetTable<ThreadGame>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserIP> UserIPs
		{
			get
			{
				return this.GetTable<UserIP>();
			}
		}
		
		public System.Data.Linq.Table<UserScoreModifier> UserScoreModifiers
		{
			get
			{
				return this.GetTable<UserScoreModifier>();
			}
		}
		
		public System.Data.Linq.Table<UserSteamID> UserSteamIDs
		{
			get
			{
				return this.GetTable<UserSteamID>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comments")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _ThreadID;
		
		private int _UserID;
		
		private string _Url;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntityRef<Thread> _Thread;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnThreadIDChanging(int value);
    partial void OnThreadIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public Comment()
		{
			this._Thread = default(EntityRef<Thread>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadID", DbType="Int NOT NULL")]
		public int ThreadID
		{
			get
			{
				return this._ThreadID;
			}
			set
			{
				if ((this._ThreadID != value))
				{
					if (this._Thread.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThreadIDChanging(value);
					this.SendPropertyChanging();
					this._ThreadID = value;
					this.SendPropertyChanged("ThreadID");
					this.OnThreadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Thread_Comment", Storage="_Thread", ThisKey="ThreadID", OtherKey="id", IsForeignKey=true)]
		public Thread Thread
		{
			get
			{
				return this._Thread.Entity;
			}
			set
			{
				Thread previousValue = this._Thread.Entity;
				if (((previousValue != value) 
							|| (this._Thread.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Thread.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Thread.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._ThreadID = value.id;
					}
					else
					{
						this._ThreadID = default(int);
					}
					this.SendPropertyChanged("Thread");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="UserID", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._UserID = value.id;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserWarned")]
	public partial class UserWarned : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _UserID;
		
		private int _WarnedByModID;
		
		private System.DateTime _CreatedDate;
		
		private string _Reason;
		
		private bool _Active;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnWarnedByModIDChanging(int value);
    partial void OnWarnedByModIDChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public UserWarned()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarnedByModID", DbType="Int NOT NULL")]
		public int WarnedByModID
		{
			get
			{
				return this._WarnedByModID;
			}
			set
			{
				if ((this._WarnedByModID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarnedByModIDChanging(value);
					this.SendPropertyChanging();
					this._WarnedByModID = value;
					this.SendPropertyChanged("WarnedByModID");
					this.OnWarnedByModIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserWarned", Storage="_User", ThisKey="UserID", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserWarneds.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserWarneds.Add(this);
						this._UserID = value.id;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserWarned1", Storage="_User1", ThisKey="WarnedByModID", OtherKey="id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.UserWarneds1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.UserWarneds1.Add(this);
						this._WarnedByModID = value.id;
					}
					else
					{
						this._WarnedByModID = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Name;
		
		private int _SteamID;
		
		private byte _PointWorth;
		
		private bool _IsSteamSubscription;
		
		private bool _IsDLC;
		
		private int _BaseGameSteamID;
		
		private string _StoreUrl;
		
		private EntitySet<ThreadGame> _ThreadGames;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSteamIDChanging(int value);
    partial void OnSteamIDChanged();
    partial void OnPointWorthChanging(byte value);
    partial void OnPointWorthChanged();
    partial void OnIsSteamSubscriptionChanging(bool value);
    partial void OnIsSteamSubscriptionChanged();
    partial void OnIsDLCChanging(bool value);
    partial void OnIsDLCChanged();
    partial void OnBaseGameSteamIDChanging(int value);
    partial void OnBaseGameSteamIDChanged();
    partial void OnStoreUrlChanging(string value);
    partial void OnStoreUrlChanged();
    #endregion
		
		public Game()
		{
			this._ThreadGames = new EntitySet<ThreadGame>(new Action<ThreadGame>(this.attach_ThreadGames), new Action<ThreadGame>(this.detach_ThreadGames));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SteamID", DbType="Int NOT NULL")]
		public int SteamID
		{
			get
			{
				return this._SteamID;
			}
			set
			{
				if ((this._SteamID != value))
				{
					this.OnSteamIDChanging(value);
					this.SendPropertyChanging();
					this._SteamID = value;
					this.SendPropertyChanged("SteamID");
					this.OnSteamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PointWorth", DbType="TinyInt NOT NULL")]
		public byte PointWorth
		{
			get
			{
				return this._PointWorth;
			}
			set
			{
				if ((this._PointWorth != value))
				{
					this.OnPointWorthChanging(value);
					this.SendPropertyChanging();
					this._PointWorth = value;
					this.SendPropertyChanged("PointWorth");
					this.OnPointWorthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSteamSubscription", DbType="Bit NOT NULL")]
		public bool IsSteamSubscription
		{
			get
			{
				return this._IsSteamSubscription;
			}
			set
			{
				if ((this._IsSteamSubscription != value))
				{
					this.OnIsSteamSubscriptionChanging(value);
					this.SendPropertyChanging();
					this._IsSteamSubscription = value;
					this.SendPropertyChanged("IsSteamSubscription");
					this.OnIsSteamSubscriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDLC", DbType="Bit NOT NULL")]
		public bool IsDLC
		{
			get
			{
				return this._IsDLC;
			}
			set
			{
				if ((this._IsDLC != value))
				{
					this.OnIsDLCChanging(value);
					this.SendPropertyChanging();
					this._IsDLC = value;
					this.SendPropertyChanged("IsDLC");
					this.OnIsDLCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseGameSteamID", DbType="Int NOT NULL")]
		public int BaseGameSteamID
		{
			get
			{
				return this._BaseGameSteamID;
			}
			set
			{
				if ((this._BaseGameSteamID != value))
				{
					this.OnBaseGameSteamIDChanging(value);
					this.SendPropertyChanging();
					this._BaseGameSteamID = value;
					this.SendPropertyChanged("BaseGameSteamID");
					this.OnBaseGameSteamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreUrl", DbType="VarChar(255)")]
		public string StoreUrl
		{
			get
			{
				return this._StoreUrl;
			}
			set
			{
				if ((this._StoreUrl != value))
				{
					this.OnStoreUrlChanging(value);
					this.SendPropertyChanging();
					this._StoreUrl = value;
					this.SendPropertyChanged("StoreUrl");
					this.OnStoreUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_ThreadGame", Storage="_ThreadGames", ThisKey="id", OtherKey="GameID")]
		public EntitySet<ThreadGame> ThreadGames
		{
			get
			{
				return this._ThreadGames;
			}
			set
			{
				this._ThreadGames.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ThreadGames(ThreadGame entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_ThreadGames(ThreadGame entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModAlerts")]
	public partial class ModAlert : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Message;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _HandledDate;
		
		private System.Nullable<int> _ModID;
		
		private string _ModComment;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnHandledDateChanging(System.Nullable<System.DateTime> value);
    partial void OnHandledDateChanged();
    partial void OnModIDChanging(System.Nullable<int> value);
    partial void OnModIDChanged();
    partial void OnModCommentChanging(string value);
    partial void OnModCommentChanged();
    #endregion
		
		public ModAlert()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandledDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> HandledDate
		{
			get
			{
				return this._HandledDate;
			}
			set
			{
				if ((this._HandledDate != value))
				{
					this.OnHandledDateChanging(value);
					this.SendPropertyChanging();
					this._HandledDate = value;
					this.SendPropertyChanged("HandledDate");
					this.OnHandledDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModID", DbType="Int")]
		public System.Nullable<int> ModID
		{
			get
			{
				return this._ModID;
			}
			set
			{
				if ((this._ModID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModIDChanging(value);
					this.SendPropertyChanging();
					this._ModID = value;
					this.SendPropertyChanged("ModID");
					this.OnModIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModComment", DbType="VarChar(1000)")]
		public string ModComment
		{
			get
			{
				return this._ModComment;
			}
			set
			{
				if ((this._ModComment != value))
				{
					this.OnModCommentChanging(value);
					this.SendPropertyChanging();
					this._ModComment = value;
					this.SendPropertyChanged("ModComment");
					this.OnModCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ModAlert", Storage="_User", ThisKey="ModID", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ModAlerts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ModAlerts.Add(this);
						this._ModID = value.id;
					}
					else
					{
						this._ModID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Thread")]
	public partial class Thread : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _UserID;
		
		private string _Title;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _EndDate;
		
		private string _ThingID;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<ThreadGame> _ThreadGames;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnThingIDChanging(string value);
    partial void OnThingIDChanged();
    #endregion
		
		public Thread()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._ThreadGames = new EntitySet<ThreadGame>(new Action<ThreadGame>(this.attach_ThreadGames), new Action<ThreadGame>(this.detach_ThreadGames));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThingID", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string ThingID
		{
			get
			{
				return this._ThingID;
			}
			set
			{
				if ((this._ThingID != value))
				{
					this.OnThingIDChanging(value);
					this.SendPropertyChanging();
					this._ThingID = value;
					this.SendPropertyChanged("ThingID");
					this.OnThingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Thread_Comment", Storage="_Comments", ThisKey="id", OtherKey="ThreadID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Thread_ThreadGame", Storage="_ThreadGames", ThisKey="id", OtherKey="ThreadID")]
		public EntitySet<ThreadGame> ThreadGames
		{
			get
			{
				return this._ThreadGames;
			}
			set
			{
				this._ThreadGames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Thread", Storage="_User", ThisKey="UserID", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Threads.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Threads.Add(this);
						this._UserID = value.id;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Thread = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Thread = null;
		}
		
		private void attach_ThreadGames(ThreadGame entity)
		{
			this.SendPropertyChanging();
			entity.Thread = this;
		}
		
		private void detach_ThreadGames(ThreadGame entity)
		{
			this.SendPropertyChanging();
			entity.Thread = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ThreadGame")]
	public partial class ThreadGame : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _ThreadID;
		
		private int _GameID;
		
		private System.Nullable<int> _WinnerID;
		
		private bool _Ineligible;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<Thread> _Thread;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnThreadIDChanging(int value);
    partial void OnThreadIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnWinnerIDChanging(System.Nullable<int> value);
    partial void OnWinnerIDChanged();
    partial void OnIneligibleChanging(bool value);
    partial void OnIneligibleChanged();
    #endregion
		
		public ThreadGame()
		{
			this._Game = default(EntityRef<Game>);
			this._Thread = default(EntityRef<Thread>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadID", DbType="Int NOT NULL")]
		public int ThreadID
		{
			get
			{
				return this._ThreadID;
			}
			set
			{
				if ((this._ThreadID != value))
				{
					if (this._Thread.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThreadIDChanging(value);
					this.SendPropertyChanging();
					this._ThreadID = value;
					this.SendPropertyChanged("ThreadID");
					this.OnThreadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinnerID", DbType="Int")]
		public System.Nullable<int> WinnerID
		{
			get
			{
				return this._WinnerID;
			}
			set
			{
				if ((this._WinnerID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWinnerIDChanging(value);
					this.SendPropertyChanging();
					this._WinnerID = value;
					this.SendPropertyChanged("WinnerID");
					this.OnWinnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ineligible", DbType="Bit NOT NULL")]
		public bool Ineligible
		{
			get
			{
				return this._Ineligible;
			}
			set
			{
				if ((this._Ineligible != value))
				{
					this.OnIneligibleChanging(value);
					this.SendPropertyChanging();
					this._Ineligible = value;
					this.SendPropertyChanged("Ineligible");
					this.OnIneligibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_ThreadGame", Storage="_Game", ThisKey="GameID", OtherKey="id", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.ThreadGames.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.ThreadGames.Add(this);
						this._GameID = value.id;
					}
					else
					{
						this._GameID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Thread_ThreadGame", Storage="_Thread", ThisKey="ThreadID", OtherKey="id", IsForeignKey=true)]
		public Thread Thread
		{
			get
			{
				return this._Thread.Entity;
			}
			set
			{
				Thread previousValue = this._Thread.Entity;
				if (((previousValue != value) 
							|| (this._Thread.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Thread.Entity = null;
						previousValue.ThreadGames.Remove(this);
					}
					this._Thread.Entity = value;
					if ((value != null))
					{
						value.ThreadGames.Add(this);
						this._ThreadID = value.id;
					}
					else
					{
						this._ThreadID = default(int);
					}
					this.SendPropertyChanged("Thread");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ThreadGame", Storage="_User", ThisKey="WinnerID", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ThreadGames.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ThreadGames.Add(this);
						this._WinnerID = value.id;
					}
					else
					{
						this._WinnerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Username;
		
		private System.DateTime _RecordCreatedDate;
		
		private System.Nullable<int> _AccountGroupID;
		
		private bool _IsMod;
		
		private bool _IsWarned;
		
		private short _ReceivedCount;
		
		private short _GivenCount;
		
		private System.Nullable<System.DateTime> _BannedUntil;
		
		private string _ModHash;
		
		private int _SteamID;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<UserWarned> _UserWarneds;
		
		private EntitySet<UserWarned> _UserWarneds1;
		
		private EntitySet<ModAlert> _ModAlerts;
		
		private EntitySet<Thread> _Threads;
		
		private EntitySet<ThreadGame> _ThreadGames;
		
		private EntitySet<UserIP> _UserIPs;
		
		private EntitySet<UserScoreModifier> _UserScoreModifiers;
		
		private EntitySet<UserScoreModifier> _UserScoreModifiers1;
		
		private EntitySet<UserSteamID> _UserSteamIDs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnRecordCreatedDateChanging(System.DateTime value);
    partial void OnRecordCreatedDateChanged();
    partial void OnAccountGroupIDChanging(System.Nullable<int> value);
    partial void OnAccountGroupIDChanged();
    partial void OnIsModChanging(bool value);
    partial void OnIsModChanged();
    partial void OnIsWarnedChanging(bool value);
    partial void OnIsWarnedChanged();
    partial void OnReceivedCountChanging(short value);
    partial void OnReceivedCountChanged();
    partial void OnGivenCountChanging(short value);
    partial void OnGivenCountChanged();
    partial void OnBannedUntilChanging(System.Nullable<System.DateTime> value);
    partial void OnBannedUntilChanged();
    partial void OnModHashChanging(string value);
    partial void OnModHashChanged();
    partial void OnSteamIDChanging(int value);
    partial void OnSteamIDChanged();
    #endregion
		
		public User()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._UserWarneds = new EntitySet<UserWarned>(new Action<UserWarned>(this.attach_UserWarneds), new Action<UserWarned>(this.detach_UserWarneds));
			this._UserWarneds1 = new EntitySet<UserWarned>(new Action<UserWarned>(this.attach_UserWarneds1), new Action<UserWarned>(this.detach_UserWarneds1));
			this._ModAlerts = new EntitySet<ModAlert>(new Action<ModAlert>(this.attach_ModAlerts), new Action<ModAlert>(this.detach_ModAlerts));
			this._Threads = new EntitySet<Thread>(new Action<Thread>(this.attach_Threads), new Action<Thread>(this.detach_Threads));
			this._ThreadGames = new EntitySet<ThreadGame>(new Action<ThreadGame>(this.attach_ThreadGames), new Action<ThreadGame>(this.detach_ThreadGames));
			this._UserIPs = new EntitySet<UserIP>(new Action<UserIP>(this.attach_UserIPs), new Action<UserIP>(this.detach_UserIPs));
			this._UserScoreModifiers = new EntitySet<UserScoreModifier>(new Action<UserScoreModifier>(this.attach_UserScoreModifiers), new Action<UserScoreModifier>(this.detach_UserScoreModifiers));
			this._UserScoreModifiers1 = new EntitySet<UserScoreModifier>(new Action<UserScoreModifier>(this.attach_UserScoreModifiers1), new Action<UserScoreModifier>(this.detach_UserScoreModifiers1));
			this._UserSteamIDs = new EntitySet<UserSteamID>(new Action<UserSteamID>(this.attach_UserSteamIDs), new Action<UserSteamID>(this.detach_UserSteamIDs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordCreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime RecordCreatedDate
		{
			get
			{
				return this._RecordCreatedDate;
			}
			set
			{
				if ((this._RecordCreatedDate != value))
				{
					this.OnRecordCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._RecordCreatedDate = value;
					this.SendPropertyChanged("RecordCreatedDate");
					this.OnRecordCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountGroupID", DbType="Int")]
		public System.Nullable<int> AccountGroupID
		{
			get
			{
				return this._AccountGroupID;
			}
			set
			{
				if ((this._AccountGroupID != value))
				{
					this.OnAccountGroupIDChanging(value);
					this.SendPropertyChanging();
					this._AccountGroupID = value;
					this.SendPropertyChanged("AccountGroupID");
					this.OnAccountGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMod", DbType="Bit NOT NULL")]
		public bool IsMod
		{
			get
			{
				return this._IsMod;
			}
			set
			{
				if ((this._IsMod != value))
				{
					this.OnIsModChanging(value);
					this.SendPropertyChanging();
					this._IsMod = value;
					this.SendPropertyChanged("IsMod");
					this.OnIsModChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsWarned", DbType="Bit NOT NULL")]
		public bool IsWarned
		{
			get
			{
				return this._IsWarned;
			}
			set
			{
				if ((this._IsWarned != value))
				{
					this.OnIsWarnedChanging(value);
					this.SendPropertyChanging();
					this._IsWarned = value;
					this.SendPropertyChanged("IsWarned");
					this.OnIsWarnedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceivedCount", DbType="SmallInt NOT NULL")]
		public short ReceivedCount
		{
			get
			{
				return this._ReceivedCount;
			}
			set
			{
				if ((this._ReceivedCount != value))
				{
					this.OnReceivedCountChanging(value);
					this.SendPropertyChanging();
					this._ReceivedCount = value;
					this.SendPropertyChanged("ReceivedCount");
					this.OnReceivedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GivenCount", DbType="SmallInt NOT NULL")]
		public short GivenCount
		{
			get
			{
				return this._GivenCount;
			}
			set
			{
				if ((this._GivenCount != value))
				{
					this.OnGivenCountChanging(value);
					this.SendPropertyChanging();
					this._GivenCount = value;
					this.SendPropertyChanged("GivenCount");
					this.OnGivenCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BannedUntil", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> BannedUntil
		{
			get
			{
				return this._BannedUntil;
			}
			set
			{
				if ((this._BannedUntil != value))
				{
					this.OnBannedUntilChanging(value);
					this.SendPropertyChanging();
					this._BannedUntil = value;
					this.SendPropertyChanged("BannedUntil");
					this.OnBannedUntilChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModHash", DbType="VarChar(255)")]
		public string ModHash
		{
			get
			{
				return this._ModHash;
			}
			set
			{
				if ((this._ModHash != value))
				{
					this.OnModHashChanging(value);
					this.SendPropertyChanging();
					this._ModHash = value;
					this.SendPropertyChanged("ModHash");
					this.OnModHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SteamID", DbType="Int NOT NULL")]
		public int SteamID
		{
			get
			{
				return this._SteamID;
			}
			set
			{
				if ((this._SteamID != value))
				{
					this.OnSteamIDChanging(value);
					this.SendPropertyChanging();
					this._SteamID = value;
					this.SendPropertyChanged("SteamID");
					this.OnSteamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comments", ThisKey="id", OtherKey="UserID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserWarned", Storage="_UserWarneds", ThisKey="id", OtherKey="UserID")]
		public EntitySet<UserWarned> UserWarneds
		{
			get
			{
				return this._UserWarneds;
			}
			set
			{
				this._UserWarneds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserWarned1", Storage="_UserWarneds1", ThisKey="id", OtherKey="WarnedByModID")]
		public EntitySet<UserWarned> UserWarneds1
		{
			get
			{
				return this._UserWarneds1;
			}
			set
			{
				this._UserWarneds1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ModAlert", Storage="_ModAlerts", ThisKey="id", OtherKey="ModID")]
		public EntitySet<ModAlert> ModAlerts
		{
			get
			{
				return this._ModAlerts;
			}
			set
			{
				this._ModAlerts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Thread", Storage="_Threads", ThisKey="id", OtherKey="UserID")]
		public EntitySet<Thread> Threads
		{
			get
			{
				return this._Threads;
			}
			set
			{
				this._Threads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ThreadGame", Storage="_ThreadGames", ThisKey="id", OtherKey="WinnerID")]
		public EntitySet<ThreadGame> ThreadGames
		{
			get
			{
				return this._ThreadGames;
			}
			set
			{
				this._ThreadGames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserIP", Storage="_UserIPs", ThisKey="id", OtherKey="UserID")]
		public EntitySet<UserIP> UserIPs
		{
			get
			{
				return this._UserIPs;
			}
			set
			{
				this._UserIPs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserScoreModifier", Storage="_UserScoreModifiers", ThisKey="id", OtherKey="UserID")]
		public EntitySet<UserScoreModifier> UserScoreModifiers
		{
			get
			{
				return this._UserScoreModifiers;
			}
			set
			{
				this._UserScoreModifiers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserScoreModifier1", Storage="_UserScoreModifiers1", ThisKey="id", OtherKey="AddedByModID")]
		public EntitySet<UserScoreModifier> UserScoreModifiers1
		{
			get
			{
				return this._UserScoreModifiers1;
			}
			set
			{
				this._UserScoreModifiers1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSteamID", Storage="_UserSteamIDs", ThisKey="id", OtherKey="UserID")]
		public EntitySet<UserSteamID> UserSteamIDs
		{
			get
			{
				return this._UserSteamIDs;
			}
			set
			{
				this._UserSteamIDs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserWarneds(UserWarned entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserWarneds(UserWarned entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserWarneds1(UserWarned entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_UserWarneds1(UserWarned entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_ModAlerts(ModAlert entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ModAlerts(ModAlert entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Threads(Thread entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Threads(Thread entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ThreadGames(ThreadGame entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ThreadGames(ThreadGame entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserIPs(UserIP entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserIPs(UserIP entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserScoreModifiers(UserScoreModifier entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserScoreModifiers(UserScoreModifier entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserScoreModifiers1(UserScoreModifier entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_UserScoreModifiers1(UserScoreModifier entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_UserSteamIDs(UserSteamID entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserSteamIDs(UserSteamID entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserIP")]
	public partial class UserIP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _UserID;
		
		private System.DateTime _CreatedDate;
		
		private string _HashedIP;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnHashedIPChanging(string value);
    partial void OnHashedIPChanged();
    #endregion
		
		public UserIP()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HashedIP", DbType="VarChar(255)")]
		public string HashedIP
		{
			get
			{
				return this._HashedIP;
			}
			set
			{
				if ((this._HashedIP != value))
				{
					this.OnHashedIPChanging(value);
					this.SendPropertyChanging();
					this._HashedIP = value;
					this.SendPropertyChanged("HashedIP");
					this.OnHashedIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserIP", Storage="_User", ThisKey="UserID", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserIPs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserIPs.Add(this);
						this._UserID = value.id;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserScoreModifier")]
	public partial class UserScoreModifier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _UserID;
		
		private int _AddedByModID;
		
		private int _ScoreModifier;
		
		private string _Reason;
		
		private System.DateTime _CreatedDate;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnAddedByModIDChanging(int value);
    partial void OnAddedByModIDChanged();
    partial void OnScoreModifierChanging(int value);
    partial void OnScoreModifierChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public UserScoreModifier()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedByModID", DbType="Int NOT NULL")]
		public int AddedByModID
		{
			get
			{
				return this._AddedByModID;
			}
			set
			{
				if ((this._AddedByModID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddedByModIDChanging(value);
					this.SendPropertyChanging();
					this._AddedByModID = value;
					this.SendPropertyChanged("AddedByModID");
					this.OnAddedByModIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreModifier", DbType="Int NOT NULL")]
		public int ScoreModifier
		{
			get
			{
				return this._ScoreModifier;
			}
			set
			{
				if ((this._ScoreModifier != value))
				{
					this.OnScoreModifierChanging(value);
					this.SendPropertyChanging();
					this._ScoreModifier = value;
					this.SendPropertyChanged("ScoreModifier");
					this.OnScoreModifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserScoreModifier", Storage="_User", ThisKey="UserID", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserScoreModifiers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserScoreModifiers.Add(this);
						this._UserID = value.id;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserScoreModifier1", Storage="_User1", ThisKey="AddedByModID", OtherKey="id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.UserScoreModifiers1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.UserScoreModifiers1.Add(this);
						this._AddedByModID = value.id;
					}
					else
					{
						this._AddedByModID = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserSteamID")]
	public partial class UserSteamID : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _UserID;
		
		private long _SteamID;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnSteamIDChanging(long value);
    partial void OnSteamIDChanged();
    #endregion
		
		public UserSteamID()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SteamID", DbType="BigInt NOT NULL")]
		public long SteamID
		{
			get
			{
				return this._SteamID;
			}
			set
			{
				if ((this._SteamID != value))
				{
					this.OnSteamIDChanging(value);
					this.SendPropertyChanging();
					this._SteamID = value;
					this.SendPropertyChanged("SteamID");
					this.OnSteamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSteamID", Storage="_User", ThisKey="UserID", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserSteamIDs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserSteamIDs.Add(this);
						this._UserID = value.id;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
