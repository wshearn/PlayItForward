#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17379
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PiF.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PlayItForward")]
	public partial class PiFDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertUser_Warned(User_Warned instance);
    partial void UpdateUser_Warned(User_Warned instance);
    partial void DeleteUser_Warned(User_Warned instance);
    partial void InsertModAlert(ModAlert instance);
    partial void UpdateModAlert(ModAlert instance);
    partial void DeleteModAlert(ModAlert instance);
    partial void InsertThread(Thread instance);
    partial void UpdateThread(Thread instance);
    partial void DeleteThread(Thread instance);
    partial void InsertThread_Game(Thread_Game instance);
    partial void UpdateThread_Game(Thread_Game instance);
    partial void DeleteThread_Game(Thread_Game instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUser_IP(User_IP instance);
    partial void UpdateUser_IP(User_IP instance);
    partial void DeleteUser_IP(User_IP instance);
    partial void InsertUser_ScoreModifier(User_ScoreModifier instance);
    partial void UpdateUser_ScoreModifier(User_ScoreModifier instance);
    partial void DeleteUser_ScoreModifier(User_ScoreModifier instance);
    partial void InsertUser_SteamID(User_SteamID instance);
    partial void UpdateUser_SteamID(User_SteamID instance);
    partial void DeleteUser_SteamID(User_SteamID instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    #endregion
		
		public PiFDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["PlayItForwardConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PiFDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PiFDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PiFDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PiFDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<User_Warned> User_Warneds
		{
			get
			{
				return this.GetTable<User_Warned>();
			}
		}
		
		public System.Data.Linq.Table<ModAlert> ModAlerts
		{
			get
			{
				return this.GetTable<ModAlert>();
			}
		}
		
		public System.Data.Linq.Table<Thread> Threads
		{
			get
			{
				return this.GetTable<Thread>();
			}
		}
		
		public System.Data.Linq.Table<Thread_Game> Thread_Games
		{
			get
			{
				return this.GetTable<Thread_Game>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<User_IP> User_IPs
		{
			get
			{
				return this.GetTable<User_IP>();
			}
		}
		
		public System.Data.Linq.Table<User_ScoreModifier> User_ScoreModifiers
		{
			get
			{
				return this.GetTable<User_ScoreModifier>();
			}
		}
		
		public System.Data.Linq.Table<User_SteamID> User_SteamIDs
		{
			get
			{
				return this.GetTable<User_SteamID>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comments")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _thread_id;
		
		private int _user_id;
		
		private string _url;
		
		private System.Nullable<System.DateTime> _deleted_date;
		
		private EntityRef<Thread> _Thread;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onthread_idChanging(int value);
    partial void Onthread_idChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void Ondeleted_dateChanging(System.Nullable<System.DateTime> value);
    partial void Ondeleted_dateChanged();
    #endregion
		
		public Comment()
		{
			this._Thread = default(EntityRef<Thread>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_thread_id", DbType="Int NOT NULL")]
		public int thread_id
		{
			get
			{
				return this._thread_id;
			}
			set
			{
				if ((this._thread_id != value))
				{
					if (this._Thread.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onthread_idChanging(value);
					this.SendPropertyChanging();
					this._thread_id = value;
					this.SendPropertyChanged("thread_id");
					this.Onthread_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> deleted_date
		{
			get
			{
				return this._deleted_date;
			}
			set
			{
				if ((this._deleted_date != value))
				{
					this.Ondeleted_dateChanging(value);
					this.SendPropertyChanging();
					this._deleted_date = value;
					this.SendPropertyChanged("deleted_date");
					this.Ondeleted_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Thread_Comment", Storage="_Thread", ThisKey="thread_id", OtherKey="id", IsForeignKey=true)]
		public Thread Thread
		{
			get
			{
				return this._Thread.Entity;
			}
			set
			{
				Thread previousValue = this._Thread.Entity;
				if (((previousValue != value) 
							|| (this._Thread.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Thread.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Thread.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._thread_id = value.id;
					}
					else
					{
						this._thread_id = default(int);
					}
					this.SendPropertyChanged("Thread");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_Warned")]
	public partial class User_Warned : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _user_id;
		
		private int _warned_by_mod_id;
		
		private System.DateTime _createddate;
		
		private string _reason;
		
		private bool _active;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onwarned_by_mod_idChanging(int value);
    partial void Onwarned_by_mod_idChanged();
    partial void OncreateddateChanging(System.DateTime value);
    partial void OncreateddateChanged();
    partial void OnreasonChanging(string value);
    partial void OnreasonChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    #endregion
		
		public User_Warned()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_warned_by_mod_id", DbType="Int NOT NULL")]
		public int warned_by_mod_id
		{
			get
			{
				return this._warned_by_mod_id;
			}
			set
			{
				if ((this._warned_by_mod_id != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onwarned_by_mod_idChanging(value);
					this.SendPropertyChanging();
					this._warned_by_mod_id = value;
					this.SendPropertyChanged("warned_by_mod_id");
					this.Onwarned_by_mod_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createddate", DbType="DateTime NOT NULL")]
		public System.DateTime createddate
		{
			get
			{
				return this._createddate;
			}
			set
			{
				if ((this._createddate != value))
				{
					this.OncreateddateChanging(value);
					this.SendPropertyChanging();
					this._createddate = value;
					this.SendPropertyChanged("createddate");
					this.OncreateddateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reason", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string reason
		{
			get
			{
				return this._reason;
			}
			set
			{
				if ((this._reason != value))
				{
					this.OnreasonChanging(value);
					this.SendPropertyChanging();
					this._reason = value;
					this.SendPropertyChanged("reason");
					this.OnreasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User_Warned", Storage="_User", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.User_Warneds.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.User_Warneds.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User_Warned1", Storage="_User1", ThisKey="warned_by_mod_id", OtherKey="id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.User_Warneds1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.User_Warneds1.Add(this);
						this._warned_by_mod_id = value.id;
					}
					else
					{
						this._warned_by_mod_id = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModAlerts")]
	public partial class ModAlert : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _message;
		
		private System.DateTime _created_date;
		
		private System.Nullable<System.DateTime> _handled_date;
		
		private System.Nullable<int> _handled_by_mod_id;
		
		private string _mod_comment;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    partial void Oncreated_dateChanging(System.DateTime value);
    partial void Oncreated_dateChanged();
    partial void Onhandled_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onhandled_dateChanged();
    partial void Onhandled_by_mod_idChanging(System.Nullable<int> value);
    partial void Onhandled_by_mod_idChanged();
    partial void Onmod_commentChanging(string value);
    partial void Onmod_commentChanged();
    #endregion
		
		public ModAlert()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_date", DbType="DateTime NOT NULL")]
		public System.DateTime created_date
		{
			get
			{
				return this._created_date;
			}
			set
			{
				if ((this._created_date != value))
				{
					this.Oncreated_dateChanging(value);
					this.SendPropertyChanging();
					this._created_date = value;
					this.SendPropertyChanged("created_date");
					this.Oncreated_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_handled_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> handled_date
		{
			get
			{
				return this._handled_date;
			}
			set
			{
				if ((this._handled_date != value))
				{
					this.Onhandled_dateChanging(value);
					this.SendPropertyChanging();
					this._handled_date = value;
					this.SendPropertyChanged("handled_date");
					this.Onhandled_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_handled_by_mod_id", DbType="Int")]
		public System.Nullable<int> handled_by_mod_id
		{
			get
			{
				return this._handled_by_mod_id;
			}
			set
			{
				if ((this._handled_by_mod_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onhandled_by_mod_idChanging(value);
					this.SendPropertyChanging();
					this._handled_by_mod_id = value;
					this.SendPropertyChanged("handled_by_mod_id");
					this.Onhandled_by_mod_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mod_comment", DbType="VarChar(1000)")]
		public string mod_comment
		{
			get
			{
				return this._mod_comment;
			}
			set
			{
				if ((this._mod_comment != value))
				{
					this.Onmod_commentChanging(value);
					this.SendPropertyChanging();
					this._mod_comment = value;
					this.SendPropertyChanged("mod_comment");
					this.Onmod_commentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ModAlert", Storage="_User", ThisKey="handled_by_mod_id", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ModAlerts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ModAlerts.Add(this);
						this._handled_by_mod_id = value.id;
					}
					else
					{
						this._handled_by_mod_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Thread")]
	public partial class Thread : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _user_id;
		
		private string _title;
		
		private System.DateTime _created_date;
		
		private string _url;
		
		private System.Nullable<System.DateTime> _end_date;
		
		private bool _ineligible;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<Thread_Game> _Thread_Games;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void Oncreated_dateChanging(System.DateTime value);
    partial void Oncreated_dateChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void Onend_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onend_dateChanged();
    partial void OnineligibleChanging(bool value);
    partial void OnineligibleChanged();
    #endregion
		
		public Thread()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Thread_Games = new EntitySet<Thread_Game>(new Action<Thread_Game>(this.attach_Thread_Games), new Action<Thread_Game>(this.detach_Thread_Games));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_date", DbType="DateTime NOT NULL")]
		public System.DateTime created_date
		{
			get
			{
				return this._created_date;
			}
			set
			{
				if ((this._created_date != value))
				{
					this.Oncreated_dateChanging(value);
					this.SendPropertyChanging();
					this._created_date = value;
					this.SendPropertyChanged("created_date");
					this.Oncreated_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_end_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> end_date
		{
			get
			{
				return this._end_date;
			}
			set
			{
				if ((this._end_date != value))
				{
					this.Onend_dateChanging(value);
					this.SendPropertyChanging();
					this._end_date = value;
					this.SendPropertyChanged("end_date");
					this.Onend_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ineligible", DbType="Bit NOT NULL")]
		public bool ineligible
		{
			get
			{
				return this._ineligible;
			}
			set
			{
				if ((this._ineligible != value))
				{
					this.OnineligibleChanging(value);
					this.SendPropertyChanging();
					this._ineligible = value;
					this.SendPropertyChanged("ineligible");
					this.OnineligibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Thread_Comment", Storage="_Comments", ThisKey="id", OtherKey="thread_id")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Thread_Thread_Game", Storage="_Thread_Games", ThisKey="id", OtherKey="thread_id")]
		public EntitySet<Thread_Game> Thread_Games
		{
			get
			{
				return this._Thread_Games;
			}
			set
			{
				this._Thread_Games.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Thread", Storage="_User", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Threads.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Threads.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Thread = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Thread = null;
		}
		
		private void attach_Thread_Games(Thread_Game entity)
		{
			this.SendPropertyChanging();
			entity.Thread = this;
		}
		
		private void detach_Thread_Games(Thread_Game entity)
		{
			this.SendPropertyChanging();
			entity.Thread = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Thread_Game")]
	public partial class Thread_Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _thread_id;
		
		private int _game_id;
		
		private System.Nullable<int> _winner_user_id;
		
		private EntityRef<Thread> _Thread;
		
		private EntityRef<User> _User;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onthread_idChanging(int value);
    partial void Onthread_idChanged();
    partial void Ongame_idChanging(int value);
    partial void Ongame_idChanged();
    partial void Onwinner_user_idChanging(System.Nullable<int> value);
    partial void Onwinner_user_idChanged();
    #endregion
		
		public Thread_Game()
		{
			this._Thread = default(EntityRef<Thread>);
			this._User = default(EntityRef<User>);
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_thread_id", DbType="Int NOT NULL")]
		public int thread_id
		{
			get
			{
				return this._thread_id;
			}
			set
			{
				if ((this._thread_id != value))
				{
					if (this._Thread.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onthread_idChanging(value);
					this.SendPropertyChanging();
					this._thread_id = value;
					this.SendPropertyChanged("thread_id");
					this.Onthread_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_game_id", DbType="Int NOT NULL")]
		public int game_id
		{
			get
			{
				return this._game_id;
			}
			set
			{
				if ((this._game_id != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ongame_idChanging(value);
					this.SendPropertyChanging();
					this._game_id = value;
					this.SendPropertyChanged("game_id");
					this.Ongame_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_winner_user_id", DbType="Int")]
		public System.Nullable<int> winner_user_id
		{
			get
			{
				return this._winner_user_id;
			}
			set
			{
				if ((this._winner_user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onwinner_user_idChanging(value);
					this.SendPropertyChanging();
					this._winner_user_id = value;
					this.SendPropertyChanged("winner_user_id");
					this.Onwinner_user_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Thread_Thread_Game", Storage="_Thread", ThisKey="thread_id", OtherKey="id", IsForeignKey=true)]
		public Thread Thread
		{
			get
			{
				return this._Thread.Entity;
			}
			set
			{
				Thread previousValue = this._Thread.Entity;
				if (((previousValue != value) 
							|| (this._Thread.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Thread.Entity = null;
						previousValue.Thread_Games.Remove(this);
					}
					this._Thread.Entity = value;
					if ((value != null))
					{
						value.Thread_Games.Add(this);
						this._thread_id = value.id;
					}
					else
					{
						this._thread_id = default(int);
					}
					this.SendPropertyChanged("Thread");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Thread_Game", Storage="_User", ThisKey="winner_user_id", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Thread_Games.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Thread_Games.Add(this);
						this._winner_user_id = value.id;
					}
					else
					{
						this._winner_user_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Thread_Game", Storage="_Game", ThisKey="game_id", OtherKey="id", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Thread_Games.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Thread_Games.Add(this);
						this._game_id = value.id;
					}
					else
					{
						this._game_id = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _username;
		
		private System.DateTime _record_created_date;
		
		private System.Nullable<int> _account_group_id;
		
		private bool _is_mod;
		
		private bool _is_warned;
		
		private short _received_count;
		
		private short _given_count;
		
		private System.Nullable<System.DateTime> _banned_until;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<User_Warned> _User_Warneds;
		
		private EntitySet<User_Warned> _User_Warneds1;
		
		private EntitySet<ModAlert> _ModAlerts;
		
		private EntitySet<Thread> _Threads;
		
		private EntitySet<Thread_Game> _Thread_Games;
		
		private EntitySet<User_IP> _User_IPs;
		
		private EntitySet<User_ScoreModifier> _User_ScoreModifiers;
		
		private EntitySet<User_ScoreModifier> _User_ScoreModifiers1;
		
		private EntitySet<User_SteamID> _User_SteamIDs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void Onrecord_created_dateChanging(System.DateTime value);
    partial void Onrecord_created_dateChanged();
    partial void Onaccount_group_idChanging(System.Nullable<int> value);
    partial void Onaccount_group_idChanged();
    partial void Onis_modChanging(bool value);
    partial void Onis_modChanged();
    partial void Onis_warnedChanging(bool value);
    partial void Onis_warnedChanged();
    partial void Onreceived_countChanging(short value);
    partial void Onreceived_countChanged();
    partial void Ongiven_countChanging(short value);
    partial void Ongiven_countChanged();
    partial void Onbanned_untilChanging(System.Nullable<System.DateTime> value);
    partial void Onbanned_untilChanged();
    #endregion
		
		public User()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._User_Warneds = new EntitySet<User_Warned>(new Action<User_Warned>(this.attach_User_Warneds), new Action<User_Warned>(this.detach_User_Warneds));
			this._User_Warneds1 = new EntitySet<User_Warned>(new Action<User_Warned>(this.attach_User_Warneds1), new Action<User_Warned>(this.detach_User_Warneds1));
			this._ModAlerts = new EntitySet<ModAlert>(new Action<ModAlert>(this.attach_ModAlerts), new Action<ModAlert>(this.detach_ModAlerts));
			this._Threads = new EntitySet<Thread>(new Action<Thread>(this.attach_Threads), new Action<Thread>(this.detach_Threads));
			this._Thread_Games = new EntitySet<Thread_Game>(new Action<Thread_Game>(this.attach_Thread_Games), new Action<Thread_Game>(this.detach_Thread_Games));
			this._User_IPs = new EntitySet<User_IP>(new Action<User_IP>(this.attach_User_IPs), new Action<User_IP>(this.detach_User_IPs));
			this._User_ScoreModifiers = new EntitySet<User_ScoreModifier>(new Action<User_ScoreModifier>(this.attach_User_ScoreModifiers), new Action<User_ScoreModifier>(this.detach_User_ScoreModifiers));
			this._User_ScoreModifiers1 = new EntitySet<User_ScoreModifier>(new Action<User_ScoreModifier>(this.attach_User_ScoreModifiers1), new Action<User_ScoreModifier>(this.detach_User_ScoreModifiers1));
			this._User_SteamIDs = new EntitySet<User_SteamID>(new Action<User_SteamID>(this.attach_User_SteamIDs), new Action<User_SteamID>(this.detach_User_SteamIDs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_record_created_date", DbType="DateTime NOT NULL")]
		public System.DateTime record_created_date
		{
			get
			{
				return this._record_created_date;
			}
			set
			{
				if ((this._record_created_date != value))
				{
					this.Onrecord_created_dateChanging(value);
					this.SendPropertyChanging();
					this._record_created_date = value;
					this.SendPropertyChanged("record_created_date");
					this.Onrecord_created_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_account_group_id", DbType="Int")]
		public System.Nullable<int> account_group_id
		{
			get
			{
				return this._account_group_id;
			}
			set
			{
				if ((this._account_group_id != value))
				{
					this.Onaccount_group_idChanging(value);
					this.SendPropertyChanging();
					this._account_group_id = value;
					this.SendPropertyChanged("account_group_id");
					this.Onaccount_group_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_mod", DbType="Bit NOT NULL")]
		public bool is_mod
		{
			get
			{
				return this._is_mod;
			}
			set
			{
				if ((this._is_mod != value))
				{
					this.Onis_modChanging(value);
					this.SendPropertyChanging();
					this._is_mod = value;
					this.SendPropertyChanged("is_mod");
					this.Onis_modChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_warned", DbType="Bit NOT NULL")]
		public bool is_warned
		{
			get
			{
				return this._is_warned;
			}
			set
			{
				if ((this._is_warned != value))
				{
					this.Onis_warnedChanging(value);
					this.SendPropertyChanging();
					this._is_warned = value;
					this.SendPropertyChanged("is_warned");
					this.Onis_warnedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_received_count", DbType="SmallInt NOT NULL")]
		public short received_count
		{
			get
			{
				return this._received_count;
			}
			set
			{
				if ((this._received_count != value))
				{
					this.Onreceived_countChanging(value);
					this.SendPropertyChanging();
					this._received_count = value;
					this.SendPropertyChanged("received_count");
					this.Onreceived_countChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_given_count", DbType="SmallInt NOT NULL")]
		public short given_count
		{
			get
			{
				return this._given_count;
			}
			set
			{
				if ((this._given_count != value))
				{
					this.Ongiven_countChanging(value);
					this.SendPropertyChanging();
					this._given_count = value;
					this.SendPropertyChanged("given_count");
					this.Ongiven_countChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_banned_until", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> banned_until
		{
			get
			{
				return this._banned_until;
			}
			set
			{
				if ((this._banned_until != value))
				{
					this.Onbanned_untilChanging(value);
					this.SendPropertyChanging();
					this._banned_until = value;
					this.SendPropertyChanged("banned_until");
					this.Onbanned_untilChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comments", ThisKey="id", OtherKey="user_id")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User_Warned", Storage="_User_Warneds", ThisKey="id", OtherKey="user_id")]
		public EntitySet<User_Warned> User_Warneds
		{
			get
			{
				return this._User_Warneds;
			}
			set
			{
				this._User_Warneds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User_Warned1", Storage="_User_Warneds1", ThisKey="id", OtherKey="warned_by_mod_id")]
		public EntitySet<User_Warned> User_Warneds1
		{
			get
			{
				return this._User_Warneds1;
			}
			set
			{
				this._User_Warneds1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ModAlert", Storage="_ModAlerts", ThisKey="id", OtherKey="handled_by_mod_id")]
		public EntitySet<ModAlert> ModAlerts
		{
			get
			{
				return this._ModAlerts;
			}
			set
			{
				this._ModAlerts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Thread", Storage="_Threads", ThisKey="id", OtherKey="user_id")]
		public EntitySet<Thread> Threads
		{
			get
			{
				return this._Threads;
			}
			set
			{
				this._Threads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Thread_Game", Storage="_Thread_Games", ThisKey="id", OtherKey="winner_user_id")]
		public EntitySet<Thread_Game> Thread_Games
		{
			get
			{
				return this._Thread_Games;
			}
			set
			{
				this._Thread_Games.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User_IP", Storage="_User_IPs", ThisKey="id", OtherKey="user_id")]
		public EntitySet<User_IP> User_IPs
		{
			get
			{
				return this._User_IPs;
			}
			set
			{
				this._User_IPs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User_ScoreModifier", Storage="_User_ScoreModifiers", ThisKey="id", OtherKey="user_id")]
		public EntitySet<User_ScoreModifier> User_ScoreModifiers
		{
			get
			{
				return this._User_ScoreModifiers;
			}
			set
			{
				this._User_ScoreModifiers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User_ScoreModifier1", Storage="_User_ScoreModifiers1", ThisKey="id", OtherKey="added_by_mod_id")]
		public EntitySet<User_ScoreModifier> User_ScoreModifiers1
		{
			get
			{
				return this._User_ScoreModifiers1;
			}
			set
			{
				this._User_ScoreModifiers1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User_SteamID", Storage="_User_SteamIDs", ThisKey="id", OtherKey="user_id")]
		public EntitySet<User_SteamID> User_SteamIDs
		{
			get
			{
				return this._User_SteamIDs;
			}
			set
			{
				this._User_SteamIDs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_User_Warneds(User_Warned entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_User_Warneds(User_Warned entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_User_Warneds1(User_Warned entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_User_Warneds1(User_Warned entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_ModAlerts(ModAlert entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ModAlerts(ModAlert entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Threads(Thread entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Threads(Thread entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Thread_Games(Thread_Game entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Thread_Games(Thread_Game entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_User_IPs(User_IP entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_User_IPs(User_IP entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_User_ScoreModifiers(User_ScoreModifier entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_User_ScoreModifiers(User_ScoreModifier entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_User_ScoreModifiers1(User_ScoreModifier entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_User_ScoreModifiers1(User_ScoreModifier entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_User_SteamIDs(User_SteamID entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_User_SteamIDs(User_SteamID entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_IP")]
	public partial class User_IP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _user_id;
		
		private System.DateTime _created_date;
		
		private string _hashed_ip;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Oncreated_dateChanging(System.DateTime value);
    partial void Oncreated_dateChanged();
    partial void Onhashed_ipChanging(string value);
    partial void Onhashed_ipChanged();
    #endregion
		
		public User_IP()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_date", DbType="DateTime NOT NULL")]
		public System.DateTime created_date
		{
			get
			{
				return this._created_date;
			}
			set
			{
				if ((this._created_date != value))
				{
					this.Oncreated_dateChanging(value);
					this.SendPropertyChanging();
					this._created_date = value;
					this.SendPropertyChanged("created_date");
					this.Oncreated_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hashed_ip", DbType="VarChar(255)")]
		public string hashed_ip
		{
			get
			{
				return this._hashed_ip;
			}
			set
			{
				if ((this._hashed_ip != value))
				{
					this.Onhashed_ipChanging(value);
					this.SendPropertyChanging();
					this._hashed_ip = value;
					this.SendPropertyChanged("hashed_ip");
					this.Onhashed_ipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User_IP", Storage="_User", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.User_IPs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.User_IPs.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_ScoreModifier")]
	public partial class User_ScoreModifier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _user_id;
		
		private int _added_by_mod_id;
		
		private int _score_modifier;
		
		private string _reason;
		
		private System.DateTime _created_date;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onadded_by_mod_idChanging(int value);
    partial void Onadded_by_mod_idChanged();
    partial void Onscore_modifierChanging(int value);
    partial void Onscore_modifierChanged();
    partial void OnreasonChanging(string value);
    partial void OnreasonChanged();
    partial void Oncreated_dateChanging(System.DateTime value);
    partial void Oncreated_dateChanged();
    #endregion
		
		public User_ScoreModifier()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_added_by_mod_id", DbType="Int NOT NULL")]
		public int added_by_mod_id
		{
			get
			{
				return this._added_by_mod_id;
			}
			set
			{
				if ((this._added_by_mod_id != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onadded_by_mod_idChanging(value);
					this.SendPropertyChanging();
					this._added_by_mod_id = value;
					this.SendPropertyChanged("added_by_mod_id");
					this.Onadded_by_mod_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_score_modifier", DbType="Int NOT NULL")]
		public int score_modifier
		{
			get
			{
				return this._score_modifier;
			}
			set
			{
				if ((this._score_modifier != value))
				{
					this.Onscore_modifierChanging(value);
					this.SendPropertyChanging();
					this._score_modifier = value;
					this.SendPropertyChanged("score_modifier");
					this.Onscore_modifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reason", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string reason
		{
			get
			{
				return this._reason;
			}
			set
			{
				if ((this._reason != value))
				{
					this.OnreasonChanging(value);
					this.SendPropertyChanging();
					this._reason = value;
					this.SendPropertyChanged("reason");
					this.OnreasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_date", DbType="DateTime NOT NULL")]
		public System.DateTime created_date
		{
			get
			{
				return this._created_date;
			}
			set
			{
				if ((this._created_date != value))
				{
					this.Oncreated_dateChanging(value);
					this.SendPropertyChanging();
					this._created_date = value;
					this.SendPropertyChanged("created_date");
					this.Oncreated_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User_ScoreModifier", Storage="_User", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.User_ScoreModifiers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.User_ScoreModifiers.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User_ScoreModifier1", Storage="_User1", ThisKey="added_by_mod_id", OtherKey="id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.User_ScoreModifiers1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.User_ScoreModifiers1.Add(this);
						this._added_by_mod_id = value.id;
					}
					else
					{
						this._added_by_mod_id = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_SteamID")]
	public partial class User_SteamID : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _user_id;
		
		private long _steamid;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void OnsteamidChanging(long value);
    partial void OnsteamidChanged();
    #endregion
		
		public User_SteamID()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_steamid", DbType="BigInt NOT NULL")]
		public long steamid
		{
			get
			{
				return this._steamid;
			}
			set
			{
				if ((this._steamid != value))
				{
					this.OnsteamidChanging(value);
					this.SendPropertyChanging();
					this._steamid = value;
					this.SendPropertyChanged("steamid");
					this.OnsteamidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User_SteamID", Storage="_User", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.User_SteamIDs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.User_SteamIDs.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private int _steam_app_id;
		
		private byte _pif_points;
		
		private EntitySet<Thread_Game> _Thread_Games;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onsteam_app_idChanging(int value);
    partial void Onsteam_app_idChanged();
    partial void Onpif_pointsChanging(byte value);
    partial void Onpif_pointsChanged();
    #endregion
		
		public Game()
		{
			this._Thread_Games = new EntitySet<Thread_Game>(new Action<Thread_Game>(this.attach_Thread_Games), new Action<Thread_Game>(this.detach_Thread_Games));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_steam_app_id", DbType="Int NOT NULL")]
		public int steam_app_id
		{
			get
			{
				return this._steam_app_id;
			}
			set
			{
				if ((this._steam_app_id != value))
				{
					this.Onsteam_app_idChanging(value);
					this.SendPropertyChanging();
					this._steam_app_id = value;
					this.SendPropertyChanged("steam_app_id");
					this.Onsteam_app_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pif_points", DbType="TinyInt NOT NULL")]
		public byte pif_points
		{
			get
			{
				return this._pif_points;
			}
			set
			{
				if ((this._pif_points != value))
				{
					this.Onpif_pointsChanging(value);
					this.SendPropertyChanging();
					this._pif_points = value;
					this.SendPropertyChanged("pif_points");
					this.Onpif_pointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Thread_Game", Storage="_Thread_Games", ThisKey="id", OtherKey="game_id")]
		public EntitySet<Thread_Game> Thread_Games
		{
			get
			{
				return this._Thread_Games;
			}
			set
			{
				this._Thread_Games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Thread_Games(Thread_Game entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Thread_Games(Thread_Game entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
}
#pragma warning restore 1591
